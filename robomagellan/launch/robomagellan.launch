<launch>

    <!--
         tf
     -->

    <!-- provide static transforms for the robot -->
	<param name="robot_description" textfile="$(find robomagellan)/models/corobot1.urdf" />
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" respawn="true" />
	<!-- provide transform from /map->/odom -->
    <node name="robomagellan_localization" type="robomagellan_localization.py" respawn="true"/>


    <!--
         odometry
     -->

    <!-- wheel encoder odometry -->
    <node name="wheel_encoders" pkg="robomagellan" type="wheel_encoders.py" respawn="true" /> 
    <!-- imu odometry -->
    <node name="imu" pkg="robomagellan" type="ImuPublisher.py" respawn="true" />
    <!-- gps odometry -->
    <node name="gps" pkg="robomagellan" type="gpsLocation.py" respawn="true" /> 
    <!-- fuse odometry from the above sources into a single robot pose -->
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
      <param name="output_frame" value="odom"/>
      <param name="freq" value="30.0"/>
      <param name="sensor_timeout" value="1.0"/>  
      <!-- expects a topic publishing on "wheel_odom" -->
      <remap from="odom" to="wheel_odom" />
      <param name="odom_used" value="true"/>
      <!-- expects a topic publishing on "imu_data" -->
      <param name="imu_used" value="true"/>
      <!-- expects a topic publishing on "gps_odom" -->
      <remap from="vo" to="gps_odom" />
      <param name="vo_used" value="false"/>
    </node>


    <!--
         sensing
    -->

    <!-- TODO add nodes for ultrasound and IR sensors here when we have them -->


    <!--
         navigation
    -->

    <!-- load in move_base from the navigation stack. given a goal, this implements a local and global planner -->
    <include file="$(find robomagellan)/config/move_base.xml"/> 
    <!-- sets the goals for the navigation stack to follow -->
    <node name="strategy" pkg="robomagellan" type="strategy.py" args="$(find robomagellan)/worlds/simple-course.waypoints"/> 
    <!-- publishes the location of a cone -->
    <node name="cone_tracker" pkg="robomagellan" type="cone_tracker.py" respawn="true" /> 
    <!-- publishes when we hit something (hopefully a cone!) -->
	<node name="collision" pkg="robomagellan" type="collision_detector.py" respawn="true" /> 
	<!-- TODO add capture_cone node when we have it -->
	<!-- TODO add cmd_vel_mux node when we have it -->

    
    <!--
         debugging
         (GUI tools for monitoring, disable during actual run) 
    -->

	<node name="rxconsole" pkg="rxtools" type="rxconsole" />
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find robomagellan)/worlds/robomagellan.vcg" />

</launch>

